AST: Module(
  body=[
    FunctionDef(
      name='fizzbuzz',
      args=arguments(
        posonlyargs=[],
        args=[
          arg(arg='n')],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        If(
          test=BoolOp(
            op=And(),
            values=[
              Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=3)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=5)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)])]),
          body=[
            Return(
              value=Constant(value='FizzBuzz'))],
          orelse=[
            If(
              test=Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=3)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              body=[
                Return(
                  value=Constant(value='Fizz'))],
              orelse=[
                If(
                  test=Compare(
                    left=BinOp(
                      left=Name(id='n', ctx=Load()),
                      op=Mod(),
                      right=Constant(value=5)),
                    ops=[
                      Eq()],
                    comparators=[
                      Constant(value=0)]),
                  body=[
                    Return(
                      value=Constant(value='Buzz'))],
                  orelse=[])])]),
        Return(
          value=Name(id='n', ctx=Load()))],
      decorator_list=[])],
  type_ignores=[])
node: <ast.Module object at 0x00000281465B33A0>
node: <ast.FunctionDef object at 0x00000281465B3370>
processing node...
proc_node...: FunctionDef(
  name='fizzbuzz',
  args=arguments(
    posonlyargs=[],
    args=[
      arg(arg='n')],
    kwonlyargs=[],
    kw_defaults=[],
    defaults=[]),
  body=[
    If(
      test=BoolOp(
        op=And(),
        values=[
          Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=3)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=5)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)])]),
      body=[
        Return(
          value=Constant(value='FizzBuzz'))],
      orelse=[
        If(
          test=Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=3)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          body=[
            Return(
              value=Constant(value='Fizz'))],
          orelse=[
            If(
              test=Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=5)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              body=[
                Return(
                  value=Constant(value='Buzz'))],
              orelse=[])])]),
    Return(
      value=Name(id='n', ctx=Load()))],
  decorator_list=[])
proc_node...: If(
  test=BoolOp(
    op=And(),
    values=[
      Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=3)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)]),
      Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=5)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)])]),
  body=[
    Return(
      value=Constant(value='FizzBuzz'))],
  orelse=[
    If(
      test=Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=3)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)]),
      body=[
        Return(
          value=Constant(value='Fizz'))],
      orelse=[
        If(
          test=Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=5)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          body=[
            Return(
              value=Constant(value='Buzz'))],
          orelse=[])])])
proc_node...: Return(
  value=Name(id='n', ctx=Load()))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
pr: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'add_instruction', 'compile', 'cpu', 'cycle_times', 'cycles_per_beat', 'get_current_state', 'instructions', 'reset', 'tempo', 'time_signature']
pr: []
ti: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
ti: []
ev: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
ev: []
// Guitar Tab Score
// Time signature: 4/4
// Tempo: 120 BPM
// Tuning: STANDARD

