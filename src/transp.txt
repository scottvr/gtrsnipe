###################################### TEST 1 - midi input ###################################
MIDI Note Sequence:
Note On: 52 at beat 0.0
Note On: 50 at beat 0.25
Note On: 48 at beat 0.5
Note On: 50 at beat 0.75
Note On: 52 at beat 1.0
Note On: 52 at beat 1.25
Note On: 52 at beat 1.5
Note On: 50 at beat 2.0
Note On: 50 at beat 2.25
Note On: 50 at beat 2.5
Note On: 52 at beat 3.0
Note On: 55 at beat 3.25
Note On: 55 at beat 3.5
Note On: 52 at beat 4.0
Note On: 50 at beat 4.25
Note On: 48 at beat 4.5
Note On: 50 at beat 4.75
Note On: 52 at beat 5.0
Note On: 52 at beat 5.25
Note On: 52 at beat 5.5
Note On: 50 at beat 6.0
Note On: 50 at beat 6.25
Note On: 52 at beat 6.5
Note On: 50 at beat 6.75
Note On: 48 at beat 7.0
Note On: 52 at beat 5.75
SCDEBUG: e:12 pick None
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick None
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: E:12 pick None
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-techqeval -2.7
SCDEBUG: G:22 pick None
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-techqeval -2.2
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: G:20 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.0
    SCDEBUG: post-techqeval -5.0
SCDEBUG: E:10 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.2
    SCDEBUG: post-techqeval -3.2
SCDEBUG: e:10 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: E:8 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.3
    SCDEBUG: post-prevdeval -4.4
    SCDEBUG: post-techqeval -4.4
SCDEBUG: D:23 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.8000000000000003
    SCDEBUG: post-prevdeval -7.6
    SCDEBUG: post-techqeval -7.6
SCDEBUG: B:13 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -3.0
    SCDEBUG: post-techqeval -3.0
SCDEBUG: G:18 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -4.8
    SCDEBUG: post-techqeval -4.8
SCDEBUG: e:8 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -2.4
    SCDEBUG: post-techqeval -2.4
[OP] Mapped MIDI note 48 to position e:8
SCDEBUG: G:20 pick e:8
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -6.2
    SCDEBUG: post-techqeval -6.2
SCDEBUG: E:10 pick e:8
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:8
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -4.4
    SCDEBUG: post-techqeval -4.4
SCDEBUG: e:10 pick e:8
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: e:12 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.8000000000000003
    SCDEBUG: post-techqeval -2.8000000000000003
SCDEBUG: B:17 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: E:12 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.800000000000001
    SCDEBUG: post-techqeval -4.800000000000001
SCDEBUG: G:22 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -6.4
    SCDEBUG: post-techqeval -6.4
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: e:12 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: E:12 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.2
    SCDEBUG: post-techqeval -4.2
SCDEBUG: G:22 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -5.8
    SCDEBUG: post-techqeval -5.8
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: e:12 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: E:12 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.2
    SCDEBUG: post-techqeval -4.2
SCDEBUG: G:22 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -5.8
    SCDEBUG: post-techqeval -5.8
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: G:20 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.0
    SCDEBUG: post-techqeval -5.0
SCDEBUG: E:10 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.2
    SCDEBUG: post-techqeval -3.2
SCDEBUG: e:10 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: G:20 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.6
    SCDEBUG: post-techqeval -5.6
SCDEBUG: E:10 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: B:15 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.8
    SCDEBUG: post-techqeval -3.8
SCDEBUG: e:10 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.0
    SCDEBUG: post-techqeval -2.0
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: G:20 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.6
    SCDEBUG: post-techqeval -5.6
SCDEBUG: E:10 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: B:15 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.8
    SCDEBUG: post-techqeval -3.8
SCDEBUG: e:10 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.0
    SCDEBUG: post-techqeval -2.0
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: e:12 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.8000000000000003
    SCDEBUG: post-techqeval -2.8000000000000003
SCDEBUG: B:17 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: E:12 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.800000000000001
    SCDEBUG: post-techqeval -4.800000000000001
SCDEBUG: G:22 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -6.4
    SCDEBUG: post-techqeval -6.4
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: E:15 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -3.0
    SCDEBUG: post-prevdeval -5.4
    SCDEBUG: post-techqeval -5.4
SCDEBUG: e:15 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -3.4
    SCDEBUG: post-techqeval -3.4
SCDEBUG: B:20 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -5.199999999999999
    SCDEBUG: post-techqeval -5.199999999999999
[OP] Mapped MIDI note 55 to position e:15
SCDEBUG: E:15 pick e:15
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -3.0
    SCDEBUG: post-prevdeval -4.5
    SCDEBUG: post-techqeval -4.5
SCDEBUG: e:15 pick e:15
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -2.5
    SCDEBUG: post-techqeval -2.5
SCDEBUG: B:20 pick e:15
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.3
    SCDEBUG: post-techqeval -4.3
[OP] Mapped MIDI note 55 to position e:15
SCDEBUG: e:12 pick e:15
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -3.1
    SCDEBUG: post-techqeval -3.1
SCDEBUG: B:17 pick e:15
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -3.1
    SCDEBUG: post-techqeval -3.1
SCDEBUG: E:12 pick e:15
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -5.1
    SCDEBUG: post-techqeval -5.1
SCDEBUG: G:22 pick e:15
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.9
    SCDEBUG: post-techqeval -4.9
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: G:20 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.0
    SCDEBUG: post-techqeval -5.0
SCDEBUG: E:10 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.2
    SCDEBUG: post-techqeval -3.2
SCDEBUG: e:10 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: E:8 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.3
    SCDEBUG: post-prevdeval -4.4
    SCDEBUG: post-techqeval -4.4
SCDEBUG: D:23 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.8000000000000003
    SCDEBUG: post-prevdeval -7.6
    SCDEBUG: post-techqeval -7.6
SCDEBUG: B:13 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -3.0
    SCDEBUG: post-techqeval -3.0
SCDEBUG: G:18 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -4.8
    SCDEBUG: post-techqeval -4.8
SCDEBUG: e:8 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -2.4
    SCDEBUG: post-techqeval -2.4
[OP] Mapped MIDI note 48 to position e:8
SCDEBUG: G:20 pick e:8
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -6.2
    SCDEBUG: post-techqeval -6.2
SCDEBUG: E:10 pick e:8
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:8
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -4.4
    SCDEBUG: post-techqeval -4.4
SCDEBUG: e:10 pick e:8
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: e:12 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.8000000000000003
    SCDEBUG: post-techqeval -2.8000000000000003
SCDEBUG: B:17 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: E:12 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.800000000000001
    SCDEBUG: post-techqeval -4.800000000000001
SCDEBUG: G:22 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -6.4
    SCDEBUG: post-techqeval -6.4
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: e:12 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: E:12 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.2
    SCDEBUG: post-techqeval -4.2
SCDEBUG: G:22 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -5.8
    SCDEBUG: post-techqeval -5.8
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: e:12 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: E:12 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.2
    SCDEBUG: post-techqeval -4.2
SCDEBUG: G:22 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -5.8
    SCDEBUG: post-techqeval -5.8
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: e:12 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.2
    SCDEBUG: post-techqeval -2.2
SCDEBUG: B:17 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: E:12 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.2
    SCDEBUG: post-techqeval -4.2
SCDEBUG: G:22 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -5.8
    SCDEBUG: post-techqeval -5.8
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: G:20 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.0
    SCDEBUG: post-techqeval -5.0
SCDEBUG: E:10 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.2
    SCDEBUG: post-techqeval -3.2
SCDEBUG: e:10 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: G:20 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.6
    SCDEBUG: post-techqeval -5.6
SCDEBUG: E:10 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.0
    SCDEBUG: post-techqeval -4.0
SCDEBUG: B:15 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.8
    SCDEBUG: post-techqeval -3.8
SCDEBUG: e:10 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.0
    SCDEBUG: post-techqeval -2.0
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: e:12 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -2.8000000000000003
    SCDEBUG: post-techqeval -2.8000000000000003
SCDEBUG: B:17 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: E:12 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.7
    SCDEBUG: post-prevdeval -4.800000000000001
    SCDEBUG: post-techqeval -4.800000000000001
SCDEBUG: G:22 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.2
    SCDEBUG: post-prevdeval -6.4
    SCDEBUG: post-techqeval -6.4
[OP] Mapped MIDI note 52 to position e:12
SCDEBUG: G:20 pick e:12
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -5.0
    SCDEBUG: post-techqeval -5.0
SCDEBUG: E:10 pick e:12
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.5
    SCDEBUG: post-prevdeval -4.6
    SCDEBUG: post-techqeval -4.6
SCDEBUG: B:15 pick e:12
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -3.2
    SCDEBUG: post-techqeval -3.2
SCDEBUG: e:10 pick e:12
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -2.0
    SCDEBUG: post-prevdeval -2.6
    SCDEBUG: post-techqeval -2.6
[OP] Mapped MIDI note 50 to position e:10
SCDEBUG: E:8 pick e:10
    SCDEBUG: post-mideval -1.5
    SCDEBUG: post-lowfreval -2.3
    SCDEBUG: post-prevdeval -4.4
    SCDEBUG: post-techqeval -4.4
SCDEBUG: D:23 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -2.8000000000000003
    SCDEBUG: post-prevdeval -7.6
    SCDEBUG: post-techqeval -7.6
SCDEBUG: B:13 pick e:10
    SCDEBUG: post-mideval -0.5
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -3.0
    SCDEBUG: post-techqeval -3.0
SCDEBUG: G:18 pick e:10
    SCDEBUG: post-mideval 0.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -4.8
    SCDEBUG: post-techqeval -4.8
SCDEBUG: e:8 pick e:10
    SCDEBUG: post-mideval -1.0
    SCDEBUG: post-lowfreval -1.8
    SCDEBUG: post-prevdeval -2.4
    SCDEBUG: post-techqeval -2.4
[OP] Mapped MIDI note 48 to position e:8
DBG: hdr-msr TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
DBG: hdr-msr TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
DBG: hdr-msr TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
DEBUG: TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=15), beat_in_measure=3.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
DBG: hdr-msr TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
DEBUG: TabMeasure(notes=[TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=0.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=0.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=0.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=1.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.25, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=12), beat_in_measure=2.5, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=10), beat_in_measure=2.75, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None), TabNote(position=FretPosition(string=0, fret=8), beat_in_measure=3.0, technique=<Technique.PICK: 'pick'>, duration=0.25, annotation=None)], time_signature=(4, 4))
// Guitar Tab Score
// Time signature: 4/4
// Tempo: 60.0 BPM
// Tuning: STANDARD

    1           2           3           4          |-1           2           3           4          |-
e|-12-10--8-10-12-12-12----10-10-10----12-15-15----|12-10--8-10-12-12-12-12-10-10-12-10--8----------|
B|-------------------------------------------------|------------------------------------------------|
G|-------------------------------------------------|------------------------------------------------|
D|-------------------------------------------------|------------------------------------------------|
A|-------------------------------------------------|------------------------------------------------|
E|-------------------------------------------------|------------------------------------------------|

###################################### TEST 2 - fizzbuzz ast transpile ###################################
AST: Module(
  body=[
    FunctionDef(
      name='fizzbuzz',
      args=arguments(
        posonlyargs=[],
        args=[
          arg(arg='n')],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        If(
          test=BoolOp(
            op=And(),
            values=[
              Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=3)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=5)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)])]),
          body=[
            Return(
              value=Constant(value='FizzBuzz'))],
          orelse=[
            If(
              test=Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=3)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              body=[
                Return(
                  value=Constant(value='Fizz'))],
              orelse=[
                If(
                  test=Compare(
                    left=BinOp(
                      left=Name(id='n', ctx=Load()),
                      op=Mod(),
                      right=Constant(value=5)),
                    ops=[
                      Eq()],
                    comparators=[
                      Constant(value=0)]),
                  body=[
                    Return(
                      value=Constant(value='Buzz'))],
                  orelse=[])])]),
        Return(
          value=Name(id='n', ctx=Load()))],
      decorator_list=[])],
  type_ignores=[])
node: <ast.Module object at 0x000001E90DBAC2B0>
node: <ast.FunctionDef object at 0x000001E90DBAC2E0>
processing node...
proc_node...: FunctionDef(
  name='fizzbuzz',
  args=arguments(
    posonlyargs=[],
    args=[
      arg(arg='n')],
    kwonlyargs=[],
    kw_defaults=[],
    defaults=[]),
  body=[
    If(
      test=BoolOp(
        op=And(),
        values=[
          Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=3)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=5)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)])]),
      body=[
        Return(
          value=Constant(value='FizzBuzz'))],
      orelse=[
        If(
          test=Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=3)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          body=[
            Return(
              value=Constant(value='Fizz'))],
          orelse=[
            If(
              test=Compare(
                left=BinOp(
                  left=Name(id='n', ctx=Load()),
                  op=Mod(),
                  right=Constant(value=5)),
                ops=[
                  Eq()],
                comparators=[
                  Constant(value=0)]),
              body=[
                Return(
                  value=Constant(value='Buzz'))],
              orelse=[])])]),
    Return(
      value=Name(id='n', ctx=Load()))],
  decorator_list=[])
ast: functiondef...
proc_node...: If(
  test=BoolOp(
    op=And(),
    values=[
      Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=3)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)]),
      Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=5)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)])]),
  body=[
    Return(
      value=Constant(value='FizzBuzz'))],
  orelse=[
    If(
      test=Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=3)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)]),
      body=[
        Return(
          value=Constant(value='Fizz'))],
      orelse=[
        If(
          test=Compare(
            left=BinOp(
              left=Name(id='n', ctx=Load()),
              op=Mod(),
              right=Constant(value=5)),
            ops=[
              Eq()],
            comparators=[
              Constant(value=0)]),
          body=[
            Return(
              value=Constant(value='Buzz'))],
          orelse=[])])])
proc_node...: BoolOp(
  op=And(),
  values=[
    Compare(
      left=BinOp(
        left=Name(id='n', ctx=Load()),
        op=Mod(),
        right=Constant(value=3)),
      ops=[
        Eq()],
      comparators=[
        Constant(value=0)]),
    Compare(
      left=BinOp(
        left=Name(id='n', ctx=Load()),
        op=Mod(),
        right=Constant(value=5)),
      ops=[
        Eq()],
      comparators=[
        Constant(value=0)])])
proc_node...: And()
proc_node...: Compare(
  left=BinOp(
    left=Name(id='n', ctx=Load()),
    op=Mod(),
    right=Constant(value=3)),
  ops=[
    Eq()],
  comparators=[
    Constant(value=0)])
proc_node...: BinOp(
  left=Name(id='n', ctx=Load()),
  op=Mod(),
  right=Constant(value=3))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: Mod()
proc_node...: Constant(value=3)
proc_node...: Eq()
proc_node...: Constant(value=0)
proc_node...: Compare(
  left=BinOp(
    left=Name(id='n', ctx=Load()),
    op=Mod(),
    right=Constant(value=5)),
  ops=[
    Eq()],
  comparators=[
    Constant(value=0)])
proc_node...: BinOp(
  left=Name(id='n', ctx=Load()),
  op=Mod(),
  right=Constant(value=5))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: Mod()
proc_node...: Constant(value=5)
proc_node...: Eq()
proc_node...: Constant(value=0)
proc_node...: Return(
  value=Constant(value='FizzBuzz'))
proc_node...: Constant(value='FizzBuzz')
proc_node...: If(
  test=Compare(
    left=BinOp(
      left=Name(id='n', ctx=Load()),
      op=Mod(),
      right=Constant(value=3)),
    ops=[
      Eq()],
    comparators=[
      Constant(value=0)]),
  body=[
    Return(
      value=Constant(value='Fizz'))],
  orelse=[
    If(
      test=Compare(
        left=BinOp(
          left=Name(id='n', ctx=Load()),
          op=Mod(),
          right=Constant(value=5)),
        ops=[
          Eq()],
        comparators=[
          Constant(value=0)]),
      body=[
        Return(
          value=Constant(value='Buzz'))],
      orelse=[])])
proc_node...: Compare(
  left=BinOp(
    left=Name(id='n', ctx=Load()),
    op=Mod(),
    right=Constant(value=3)),
  ops=[
    Eq()],
  comparators=[
    Constant(value=0)])
proc_node...: BinOp(
  left=Name(id='n', ctx=Load()),
  op=Mod(),
  right=Constant(value=3))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: Mod()
proc_node...: Constant(value=3)
proc_node...: Eq()
proc_node...: Constant(value=0)
proc_node...: Return(
  value=Constant(value='Fizz'))
proc_node...: Constant(value='Fizz')
proc_node...: If(
  test=Compare(
    left=BinOp(
      left=Name(id='n', ctx=Load()),
      op=Mod(),
      right=Constant(value=5)),
    ops=[
      Eq()],
    comparators=[
      Constant(value=0)]),
  body=[
    Return(
      value=Constant(value='Buzz'))],
  orelse=[])
proc_node...: Compare(
  left=BinOp(
    left=Name(id='n', ctx=Load()),
    op=Mod(),
    right=Constant(value=5)),
  ops=[
    Eq()],
  comparators=[
    Constant(value=0)])
proc_node...: BinOp(
  left=Name(id='n', ctx=Load()),
  op=Mod(),
  right=Constant(value=5))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: Mod()
proc_node...: Constant(value=5)
proc_node...: Eq()
proc_node...: Constant(value=0)
proc_node...: Return(
  value=Constant(value='Buzz'))
proc_node...: Constant(value='Buzz')
proc_node...: Return(
  value=Name(id='n', ctx=Load()))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
pr: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'add_instruction', 'compile', 'cpu', 'cycle_times', 'cycles_per_beat', 'get_current_state', 'instructions', 'reset', 'tempo', 'time_signature']
pr: <gtrsnipe.computer.program.GuitarProgram object at 0x000001E90DBAD000>
ti: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
ti: []
ev: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
ev: []
// Guitar Tab Score
// Time signature: 4/4
// Tempo: 120 BPM
// Tuning: STANDARD

###################################### TEST 3 - fibonacci ast transpile ###################################
AST: Module(
  body=[
    FunctionDef(
      name='fibonacci_function',
      args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        If(
          test=Compare(
            left=Name(id='n', ctx=Load()),
            ops=[
              LtE()],
            comparators=[
              Constant(value=1)]),
          body=[
            Return(
              value=Name(id='n', ctx=Load()))],
          orelse=[]),
        Assign(
          targets=[
            Tuple(
              elts=[
                Name(id='a', ctx=Store()),
                Name(id='b', ctx=Store())],
              ctx=Store())],
          value=Tuple(
            elts=[
              Constant(value=0),
              Constant(value=1)],
            ctx=Load())),
        For(
          target=Name(id='i', ctx=Store()),
          iter=Call(
            func=Name(id='range', ctx=Load()),
            args=[
              Constant(value=2),
              Name(id='n', ctx=Load())],
            keywords=[]),
          body=[
            Assign(
              targets=[
                Tuple(
                  elts=[
                    Name(id='a', ctx=Store()),
                    Name(id='b', ctx=Store())],
                  ctx=Store())],
              value=Tuple(
                elts=[
                  Name(id='b', ctx=Load()),
                  BinOp(
                    left=Name(id='a', ctx=Load()),
                    op=Add(),
                    right=Name(id='b', ctx=Load()))],
                ctx=Load()))],
          orelse=[]),
        Return(
          value=Name(id='b', ctx=Load()))],
      decorator_list=[])],
  type_ignores=[])
node: <ast.Module object at 0x000001E90DBAC820>
node: <ast.FunctionDef object at 0x000001E90DBAC310>
processing node...
proc_node...: FunctionDef(
  name='fibonacci_function',
  args=arguments(
    posonlyargs=[],
    args=[],
    kwonlyargs=[],
    kw_defaults=[],
    defaults=[]),
  body=[
    If(
      test=Compare(
        left=Name(id='n', ctx=Load()),
        ops=[
          LtE()],
        comparators=[
          Constant(value=1)]),
      body=[
        Return(
          value=Name(id='n', ctx=Load()))],
      orelse=[]),
    Assign(
      targets=[
        Tuple(
          elts=[
            Name(id='a', ctx=Store()),
            Name(id='b', ctx=Store())],
          ctx=Store())],
      value=Tuple(
        elts=[
          Constant(value=0),
          Constant(value=1)],
        ctx=Load())),
    For(
      target=Name(id='i', ctx=Store()),
      iter=Call(
        func=Name(id='range', ctx=Load()),
        args=[
          Constant(value=2),
          Name(id='n', ctx=Load())],
        keywords=[]),
      body=[
        Assign(
          targets=[
            Tuple(
              elts=[
                Name(id='a', ctx=Store()),
                Name(id='b', ctx=Store())],
              ctx=Store())],
          value=Tuple(
            elts=[
              Name(id='b', ctx=Load()),
              BinOp(
                left=Name(id='a', ctx=Load()),
                op=Add(),
                right=Name(id='b', ctx=Load()))],
            ctx=Load()))],
      orelse=[]),
    Return(
      value=Name(id='b', ctx=Load()))],
  decorator_list=[])
ast: functiondef...
proc_node...: If(
  test=Compare(
    left=Name(id='n', ctx=Load()),
    ops=[
      LtE()],
    comparators=[
      Constant(value=1)]),
  body=[
    Return(
      value=Name(id='n', ctx=Load()))],
  orelse=[])
proc_node...: Compare(
  left=Name(id='n', ctx=Load()),
  ops=[
    LtE()],
  comparators=[
    Constant(value=1)])
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: LtE()
proc_node...: Constant(value=1)
proc_node...: Return(
  value=Name(id='n', ctx=Load()))
proc_node...: Name(id='n', ctx=Load())
proc_node...: Load()
proc_node...: Assign(
  targets=[
    Tuple(
      elts=[
        Name(id='a', ctx=Store()),
        Name(id='b', ctx=Store())],
      ctx=Store())],
  value=Tuple(
    elts=[
      Constant(value=0),
      Constant(value=1)],
    ctx=Load()))
ast: assign...
proc_node...: For(
  target=Name(id='i', ctx=Store()),
  iter=Call(
    func=Name(id='range', ctx=Load()),
    args=[
      Constant(value=2),
      Name(id='n', ctx=Load())],
    keywords=[]),
  body=[
    Assign(
      targets=[
        Tuple(
          elts=[
            Name(id='a', ctx=Store()),
            Name(id='b', ctx=Store())],
          ctx=Store())],
      value=Tuple(
        elts=[
          Name(id='b', ctx=Load()),
          BinOp(
            left=Name(id='a', ctx=Load()),
            op=Add(),
            right=Name(id='b', ctx=Load()))],
        ctx=Load()))],
  orelse=[])
ast: for...
proc_node...: Assign(
  targets=[
    Tuple(
      elts=[
        Name(id='a', ctx=Store()),
        Name(id='b', ctx=Store())],
      ctx=Store())],
  value=Tuple(
    elts=[
      Name(id='b', ctx=Load()),
      BinOp(
        left=Name(id='a', ctx=Load()),
        op=Add(),
        right=Name(id='b', ctx=Load()))],
    ctx=Load()))
ast: assign...
proc_node...: Return(
  value=Name(id='b', ctx=Load()))
proc_node...: Name(id='b', ctx=Load())
proc_node...: Load()
ops: <gtrsnipe.computer.program.GuitarProgram object at 0x000001E90DBAF010>
2222:// Guitar Tab Score
// Time signature: 4/4
// Tempo: 120 BPM
// Tuning: STANDARD

###################################### TEST 4 - fibonacci program compile ###################################
pr0g: <gtrsnipe.computer.program.GuitarProgram object at 0x000001E90DBC06A0>
c0mp1l3d: [TimedInstruction(operation=GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=0, string=0, technique=None, value=0), start_cycle=0, end_cycle=1), TimedInstruction(operation=GuitarOperation(operation=<Operation.STORE: 'store'>, fret=0, string=1, technique=None, value=None), start_cycle=4, end_cycle=5), TimedInstruction(operation=GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=1, string=0, technique=None, value=None), start_cycle=8, end_cycle=9), TimedInstruction(operation=GuitarOperation(operation=<Operation.ADD: 'add'>, fret=0, string=1, technique=None, value=None), start_cycle=10, end_cycle=12), TimedInstruction(operation=GuitarOperation(operation=<Operation.STORE: 'store'>, fret=2, string=0, technique=None, value=None), start_cycle=12, end_cycle=13), TimedInstruction(operation=GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=3, string=0, technique=None, value=None), start_cycle=16, end_cycle=17), TimedInstruction(operation=GuitarOperation(operation=<Operation.ADD: 'add'>, fret=2, string=1, technique=None, value=None), start_cycle=18, end_cycle=20), TimedInstruction(operation=GuitarOperation(operation=<Operation.STORE: 'store'>, fret=4, string=0, technique=None, value=None), start_cycle=20, end_cycle=21), TimedInstruction(operation=GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=5, string=0, technique=None, value=None), start_cycle=24, end_cycle=25), TimedInstruction(operation=GuitarOperation(operation=<Operation.ADD: 'add'>, fret=4, string=1, technique=None, value=None), start_cycle=26, end_cycle=28), TimedInstruction(operation=GuitarOperation(operation=<Operation.STORE: 'store'>, fret=6, string=0, technique=None, value=None), start_cycle=28, end_cycle=29)]
DEBUG: instop GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=0, string=0, technique=None, value=0)
DEBUG: instop GuitarOperation(operation=<Operation.STORE: 'store'>, fret=0, string=1, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=1, string=0, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.ADD: 'add'>, fret=0, string=1, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.STORE: 'store'>, fret=2, string=0, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=3, string=0, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.ADD: 'add'>, fret=2, string=1, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.STORE: 'store'>, fret=4, string=0, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.LOAD: 'load'>, fret=5, string=0, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.ADD: 'add'>, fret=4, string=1, technique=None, value=None)
DEBUG: instop GuitarOperation(operation=<Operation.STORE: 'store'>, fret=6, string=0, technique=None, value=None)
DEBUG: 0
Traceback (most recent call last):
  File "C:\Users\scott\source\gtrsnipe\src\minimal_transpiler.py", line 336, in <module>
    print(formatter.render_program(program))
  File "C:\Users\scott\source\gtrsnipe\src\gtrsnipe\core\tab.py", line 267, in render_program
    measure_content = self._format_measure(measure)
  File "C:\Users\scott\source\gtrsnipe\src\gtrsnipe\core\tab.py", line 106, in _format_measure
    beats_per_measure = measure.time_signature[0]
AttributeError: 'int' object has no attribute 'time_signature'
